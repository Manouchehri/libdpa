Code organization
=================

Some parts of the framework may not seem very straightforward, thus its organization
is explained here. The core preprocessing functions are implemented in _preprocess.c
from which the files preprocess.c, preprocess.h, preprocess.pxd and types.pxh are
auto generated by the autogen-script according to which types and type-combinations
were specified in this file.

                   autogen      * preprocess.c, preprocess.h
  _preprocess.c ------------->  * preprocess.pxd
                                * types.pxh

The file preprocessor.pyx is the preprocessing python module containing the type
independent wrapper functions, that select which function to apply based on the type
of the input and output buffers. It is also important to note, that these functions
explicitly release the GIL, to allow multicore processing.

The file correlator.cpp contains the CPP implementation of the efficient DPA
correlator. Functions for adding traces from different types have to be directly
implemented in the source file. Accordingly correlation.pyx is the python wrapper
module, using the definitions from correlator.pyx that is based on the exported
functions of correlator.h.

These low level functionalities, are unit tested by tests.py.

On a higher level, the generic analysis workflow can be defined in workflow.py
using processors of processors.py, which wrap preprocessing functionalities.

